rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create/update their own usage subcollection
      match /usage/{usageId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow users to create/update their own subscription subcollection
      match /subscription/{subscriptionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Epic accounts - allow users to read/write their own
    match /epicAccounts/{docId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Subscriptions collection - allow users to read their own and create new ones
    match /subscriptions/{subscriptionId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Only Cloud Functions can modify
    }
    
    // Usage logs - allow users to read their own and create new ones
    match /usageLogs/{logId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Only Cloud Functions can modify
    }
    
    // Webhook events are read-only for admins, write-only for Cloud Functions
    match /webhookEvents/{eventId} {
      allow read: if request.auth != null && 
        isAdmin(request.auth.uid);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Checkout sessions are read-only for users, write-only for Cloud Functions
    match /checkoutSessions/{sessionId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Portal sessions are read-only for users, write-only for Cloud Functions
    match /portalSessions/{sessionId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Analytics are read-only for admins, write-only for Cloud Functions
    match /analytics/{docId} {
      allow read: if request.auth != null && 
        isAdmin(request.auth.uid);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Analytics subcollections
    match /analytics/{docId}/{subcollection}/{docId2} {
      allow read: if request.auth != null && 
        isAdmin(request.auth.uid);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Helper function to check if user is admin
    function isAdmin(userId) {
      // Check if user has admin role or is Pro tier
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.role == 'admin' || userDoc.data.subscription.tier == 'pro';
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}