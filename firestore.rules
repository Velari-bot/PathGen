rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin
    function isAdmin(userId) {
      return request.auth != null &&
        request.auth.uid == userId &&
        get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Allow users to create their own user document during signup
      allow create: if isAuthenticated() && isOwner(userId);
      
      // Subcollections
      match /usage/{docId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      match /subscription/{docId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Usage logs - allow users to create, read their own
    match /usageLogs/{logId} {
      allow read: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Subscriptions - allow users to read/write their own, allow webhook updates
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
        (isOwner(subscriptionId) || isOwner(resource.data.userId));
      allow write: if isAuthenticated() && 
        (isOwner(subscriptionId) || isOwner(request.resource.data.userId));
      // Allow webhook updates from Cloud Functions
      allow create, update: if true;
    }

    // Webhook events - completely permissive for Cloud Functions
    match /webhookEvents/{eventId} {
      allow read, write: if true;
    }

    // Checkout sessions - users can read their own
    match /checkoutSessions/{sessionId} {
      allow read: if isAuthenticated() && 
        (isOwner(sessionId) || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Portal sessions - users can read their own
    match /portalSessions/{sessionId} {
      allow read: if isAuthenticated() && 
        (isOwner(sessionId) || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Analytics - users can read their own
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated() && 
        (isOwner(analyticsId) || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Epic accounts - users can read/write their own
    match /epicAccounts/{docId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Usage collection - users can read/write their own
    match /usage/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Credit usage tracking - users can read/write their own
    match /creditUsage/{docId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Tournament progress - users can read/write their own
    match /tournamentProgress/{docId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Tournament data - public read access for all authenticated users
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    // Tournament results - users can read their own, admins can write
    match /tournamentResults/{docId} {
      allow read: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow write: if isAdmin(request.auth.uid);
    }

    // Fortnite stats - users can read/write their own
    match /fortniteStats/{docId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(docId) || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
        (isOwner(docId) || isOwner(request.resource.data.userId));
    }

    // Replay uploads - users can read/write their own
    match /replayUploads/{docId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }

    // Conversations - users can read/write their own
    match /conversations/{docId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
          isOwner(get(/databases/$(database)/documents/conversations/$(docId)).data.userId);
        allow create: if isAuthenticated() && 
          isOwner(get(/databases/$(database)/documents/conversations/$(docId)).data.userId);
      }
    }

    // Webhook logs - admins can read, webhooks can write
    match /webhookLogs/{docId} {
      allow read: if isAdmin(request.auth.uid);
      allow write: if true; // Allow webhook writes
    }
  }
}